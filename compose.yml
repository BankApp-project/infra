# All services in this file will join the 'bankapp-infra' network.
# Containers on this network can reach each other using their service names as hostnames.
# For example, Nginx can proxy requests to 'postgres:5432'.

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  certbot_etc:

networks:
  bankapp-infra:
    external: true # Tells Compose this network is created manually and not to be removed with 'down'
  bankapp_bankapp-net:
    external: true

services:
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    networks:
      - bankapp-infra
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARED_TUNNEL_TOKEN} 

  nginx:
    image: nginx:1.29.0
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot_etc:/etc/letsencrypt
    networks:
      - bankapp-infra
      - bankapp_bankapp-net
    restart: unless-stopped
    depends_on: 
      - cloudflared
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  certbot:
    image: certbot/dns-cloudflare:latest
    container_name: certbot
    volumes:
      - certbot_etc:/etc/letsencrypt
      - ./cloudflare.ini:/etc/letsencrypt/cloudflare.ini:ro

  postgres:
    image: postgres:16
    container_name: bankapp_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # No ports need to be published to the host if only other containers need to access it.
    # We leave it here for potential external admin access.
    ports:
      - "15432:${POSTGRES_PORT}"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - bankapp-infra
    env_file: ".env"

  redis:
    image: redis:7
    container_name: bankapp_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - bankapp-infra
    env_file: ".env"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: bankapp_rabbitmq
    hostname: ${RABBITMQ_NODE_HOSTNAME}
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "127.0.0.1:${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - bankapp-infra
    env_file: ".env"


  bankapp-notification-service:
    image: bankappproject/bankapp-notification-service:1.0.0
    container_name: bankapp-notification-service
    networks:
      - bankapp-infra
    depends_on:
      - rabbitmq
    env_file: ".env"
  
  bankapp-auth-service:
    image: bankappproject/bankapp-auth-service:1.0.0
    container_name: bankapp-auth-service
    networks:
      - bankapp-infra
    depends_on:
      - bankapp-notification-service
      - postgres
      - rabbitmq
      - redis
    env_file: ".env"
